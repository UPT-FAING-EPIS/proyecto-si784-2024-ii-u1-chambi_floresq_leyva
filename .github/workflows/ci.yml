name: NuGet Package Publish
on:
  push:
    branches:
      - nugget

jobs:
  nuget-package:
    runs-on: windows-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup .NET Framework
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Add NuGet Source
        run: |
          dotnet nuget add source --username jf2021070309 --password ${{ secrets.NEW_TOKEN_NUGET }} --store-password-in-clear-text --name github "https://nuget.pkg.github.com/UPT-FAING-EPIS/index.json"

      - name: Copy Template nuspec
        run: |
          cd ProyectoFinal
          copy ProyectoFinal.template.nuspec ProyectoFinal.nuspec

      - name: Determine Next Version
        id: determine_version
        run: |
          # Leer el número de versión desde PackageVersion.txt
          $versionNumber = Get-Content -Path PackageVersion.txt | Select-Object -Last 1
          # Incrementar el número de versión
          $newVersionNumber = [int]$versionNumber + 1
          # Guardar el nuevo número de versión en el archivo
          Add-Content -Path PackageVersion.txt -Value $newVersionNumber
          # Definir la versión base
          $baseVersion = "1.0.$newVersionNumber"
          echo "::set-output name=next_version::$baseVersion"

      - name: Replace Version in nuspec
        run: |
          cd ProyectoFinal
          # Reemplazar la versión en el archivo .nuspec con la nueva versión
          (Get-Content ProyectoFinal.nuspec) -replace '{VERSION}', '${{ steps.determine_version.outputs.next_version }}' | Set-Content ProyectoFinal.nuspec

      - name: Pack NuGet Package from nuspec 
        run: |
          cd ProyectoFinal
          nuget pack ProyectoFinal.nuspec

      - name: Push NuGet Package to GitHub Packages
        run: |
          cd ProyectoFinal
          nuget push ProyectoFinal.${{ steps.determine_version.outputs.next_version }}.nupkg -Source github -ApiKey ${{ secrets.NEW_TOKEN_NUGET }} -SkipDuplicate